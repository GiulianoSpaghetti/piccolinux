#!/usr/bin/make -f
# debian/rules file to build packages from wx source
#
# Sculpted 13/2/2000 by Ron Lee <ron@debian.org> from new and
# variously stolen code :-)
# It makes copious use of the debhelper utilities written by
# Joey Hess and others.

SHELL = /bin/bash

#export DH_VERBOSE=1

export DH_OPTIONS

include /usr/share/dpkg/pkg-info.mk

DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  JOB_COUNT := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  FAST_MAKE = $(MAKE) -j $(JOB_COUNT)
else
  FAST_MAKE = $(MAKE)
endif

# If another source package is to supply the common binary packages
# for a particular Debian release, then define this variable to indicate
# the $(release) that is expected to provide it.  Do not define it at
# all if this is to be the default (or only) wx source package for the
# target release.
#
# DEBIAN_WX_DEFAULT_VERSION = 2.8


# This will extract a flavour out of the changelog and flavour the
# packages and binaries with it.  'Official' builds should use a
# changelog entry with a source package of the form wxwidgets$RELEASE.
# Flavoured builds may use wxwidgets$RELEASE-$FLAVOUR, where any
# descriptive alphanumeric name will do for FLAVOUR.  This will allow
# a custom build to be installed alongside the mainline ones without
# conflict.
DEBIAN_WXFLAVOUR := $(word 2,$(subst -, ,$(DEB_SOURCE)))


wx_major_version_number := $(shell sed -n 's/^wx_major_version_number=//p' configure.in)
wx_minor_version_number := $(shell sed -n 's/^wx_minor_version_number=//p' configure.in)
wx_release_number       := $(shell sed -n 's/^wx_release_number=//p' configure.in)

release := $(wx_major_version_number).$(wx_minor_version_number)

so_cur := $(shell sed 's,<set var="WX_CURRENT">\([0-9]\+\)</set>,\1,p;d' build/bakefiles/version.bkl)
so_age := $(shell sed 's,<set var="WX_AGE">\([0-9]\+\)</set>,\1,p;d' build/bakefiles/version.bkl)
soversion := $(shell expr $(so_cur) - $(so_age))

sorelease := $(release:%-$(DEBIAN_WXFLAVOUR)=%)-$(soversion)$(addprefix -,$(DEBIAN_WXFLAVOUR))v5
soreleasegtk3 := $(release:%-$(DEBIAN_WXFLAVOUR)=%)-gtk3-$(soversion)$(addprefix -,$(DEBIAN_WXFLAVOUR))v5

# Base value for alternative priorities.
alt_prio  := $(subst .,,$(release))

cross_host  := i586-mingw32msvc
cross_build := $(shell /usr/share/misc/config.guess)


# build options
COMMON_CONFIGURE_OPTIONS := \
    --prefix=/usr \
    --with-flavour=$(DEBIAN_WXFLAVOUR) \
    --with-zlib=sys \
    --with-expat=sys \
    $(shell DEB_LDFLAGS_MAINT_APPEND=-Wl,--as-needed DEB_CXXFLAGS_MAINT_APPEND=-std=gnu++98 dpkg-buildflags --export=configure)

ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
COMMON_CONFIGURE_OPTIONS += --disable-optimise
endif

# Avoid /usr/bin/grep getting put in the generated wx-config when built on a
# merged-usr system (which will then fail when run on a non-merged-usr system).
COMMON_CONFIGURE_OPTIONS += GREP=/bin/grep

BASE_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --disable-gui \
    --libdir=\$${exec_prefix}/lib/$(DEB_HOST_MULTIARCH)

GTK_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --enable-display \
    --enable-geometry \
    --enable-graphics_ctx \
    --enable-mediactrl \
    --enable-sound \
    --with-gtk \
    --with-libjpeg=sys \
    --with-libpng=sys \
    --with-libtiff=sys \
    --with-opengl \
    --libdir=\$${exec_prefix}/lib/$(DEB_HOST_MULTIARCH)

GTK3_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --enable-display \
    --enable-geometry \
    --enable-graphics_ctx \
    --enable-sound \
    --with-gtk=3 \
    --with-libjpeg=sys \
    --with-libpng=sys \
    --with-libtiff=sys \
    --with-opengl \
    --libdir=\$${exec_prefix}/lib/$(DEB_HOST_MULTIARCH)

MSW_CONFIGURE_OPTIONS = \
    --enable-display \
    --with-msw \
    --with-opengl

# For the MSW packages, enabling threads in wx means that your application will
# have a dependency on mingwm10.dll.  If you don't use threads, this is just an
# annoyance, so default to disabling them.  If you want a wx package to use in
# a threaded application then comment out the next line.
MSW_CONFIGURE_OPTIONS += --disable-threads

# Packages to build:
package_wxbase_lib      := libwxbase$(sorelease)
package_wxbase_dev      := libwxbase$(release)-dev

package_gtk_lib         := libwxgtk$(sorelease)
package_gtk_dev         := libwxgtk$(release)-dev

package_gtkmedia_lib    := libwxgtk-media$(sorelease)
package_gtkmedia_dev    := libwxgtk-media$(release)-dev

package_gtk3_lib         := libwxgtk$(soreleasegtk3)
package_gtk3_dev         := libwxgtk$(release)-gtk3-dev

package_gtk3media_lib    := libwxgtk-media$(soreleasegtk3)
package_gtk3media_dev    := libwxgtk-media$(release)-gtk3-dev

package_gtk3webview_lib    := libwxgtk-webview$(soreleasegtk3)
package_gtk3webview_dev    := libwxgtk-webview$(release)-gtk3-dev

package_headers         := wx$(release)-headers
package_i18n            := wx$(release)-i18n
package_doc             := wx$(release)-doc
package_examples        := wx$(release)-examples
package_common           = wx-common

# The packages listed here are common to all wx versions, and may be provided
# by another source package if more than one is in the release simultaneously.
common_packages	:= $(package_common)


package_msw_dev         := libwxmsw$(release)-dev
package_headers_msw     := wx$(release)-headers-msw

# The packages listed here will not be built by default.
do_not_build_packages :=
ifdef DEBIAN_WX_DEFAULT_VERSION
do_not_build_packages += $(common_packages)
endif


# Build directories:
objdir_wxbase_shared       = objs_wxbase_sh
objdir_gtk_shared          = objs_gtk_sh
objdir_gtk_install         = objs_gtk_install
objdir_gtk3_shared         = objs_gtk3_sh
objdir_gtk3_install        = objs_gtk3_install

objdir_doc                 = docs/doxygen/out
objdir_examples            = docs/examples
objdir_i18n                = locale

objdir_msw_shared          = objs_msw_sh
objdir_msw_static          = objs_msw_st
objdir_msw_install         = objs_msw_install

objdirs := $(objdir_wxbase_shared) $(objdir_gtk_shared) $(objdir_gtk_install) \
	   $(objdir_gtk3_shared) $(objdir_gtk3_install) \
	   $(objdir_doc) $(objdir_examples) \
	   $(objdir_msw_shared) $(objdir_msw_static) $(objdir_msw_install)

#	note that the i18n package is actually arch indep (once built)
#	but must be built (and installed) during the arch any phase as
#	it's pulled out of the wxGTK shared lib package.


# Build stamps:
build_arch_stamps = build-wxbase-shared-stamp \
                    build-gtk-shared-stamp build-gtk-shared-contrib-stamp \
                    build-gtk3-shared-stamp \
                    build-i18n-stamp

build_indep_stamps = build-doc-stamp build-examples-stamp

build_cross_stamps = build-msw-shared-stamp build-msw-static-stamp

build_stamps_native := $(build_arch_stamps) $(build_indep_stamps)

build_stamps := $(build_stamps_native) $(build_cross_stamps)


# Install targets:
install_all_arch = install-wxbase-lib install-wxbase-dev \
                   install-gtk-lib install-gtk-dev        \
		   install-gtkmedia-lib install-gtkmedia-dev \
                   install-gtk3-lib install-gtk3-dev        \
		   install-gtk3media-lib install-gtk3media-dev \
		   install-gtk3webview-lib install-gtk3webview-dev \
                   install-headers install-i18n

ifndef DEBIAN_WX_DEFAULT_VERSION
  install_all_arch += install-common
endif

install_all_indep = install-doc install-examples

install_all_cross = install-msw-dev install-headers-msw

install_all_native := $(install_all_arch) $(install_all_indep)

install_all := $(install_all_native) $(install_all_cross)


# The Rules:

debian/control: debian/control.in
	sed -e 's/=V/$(release)/g;s/=SOV/$(sorelease)/g;s/=SOG3V/$(soreleasegtk3)/g'\
		< debian/control.in > debian/control

control-files-stamp: debian/control
	dh_testdir
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_wxbase_dev).$$f";    \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxbase-dev.$$f                           \
			> debian/$(package_wxbase_dev).$$f;                  \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_gtk_dev).$$f";       \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxgtk-dev.$$f                            \
			> debian/$(package_gtk_dev).$$f;                     \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_gtk3_dev).$$f";      \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxgtk-gtk3-dev.$$f                       \
			> debian/$(package_gtk3_dev).$$f;                    \
	done
	@for f in doc-base; do                                               \
		echo "generating control file $(package_doc).$$f";           \
		sed -e 's/=V/$(release)/g' < debian/wx-doc.$$f               \
			> debian/$(package_doc).$$f;                         \
	done
	@for f in examples; do                                               \
		echo "generating control file $(package_examples).$$f";      \
		cp debian/wx-examples.$$f debian/$(package_examples).$$f;    \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_msw_dev).$$f";       \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g'            \
		    -e	's/=H/$(cross_host)/g;'                              \
			< debian/libwxmsw-dev.$$f                            \
			> debian/$(package_msw_dev).$$f;                     \
	done
	@echo "generating control file lintian-override";                    \
		sed -e  's/=V/$(release)/g;s/=SOV/$(sorelease)/g;s/=SOG3V/$(soreleasegtk3)/g'            \
			< debian/lintian-override.in                         \
			> debian/lintian-override;                           \
	touch $@

build-arch: control-files-stamp $(build_arch_stamps)
build-indep: control-files-stamp $(build_indep_stamps)
build_all: control-files-stamp $(build_stamps_native)

# Really we should probably do nothing here until we know which
# binary target is being called, but alpha builds were exploding
# (compiler segfaults) in random places when building under fakeroot
# from the binary-arch target.  Build all -arch files here then, and
# let the -indep stuff fend for itself later.

build: build-stamp build-arch
build-stamp:


# Building wxgtk produces the wxbase libraries too, but we also need
# the config files for wxbase, so we configure a wxbase tree to get
# these (but we don't need to actually build it).

configure-wxbase-shared-stamp:
	dh_testdir
	autoconf -f -B build/autoconf_prepend-include
	dh_update_autotools_config
	mkdir -p $(objdir_wxbase_shared)
	cd $(objdir_wxbase_shared) \
	    && ../configure $(BASE_CONFIGURE_OPTIONS)
	touch $@

build-wxbase-shared-stamp: configure-wxbase-shared-stamp
	dh_testdir
	# Nothing to build here, move along...
	#$(FAST_MAKE) -C $(objdir_wxbase_shared)
	touch $@

configure-gtk-shared-stamp:
	dh_testdir
	autoconf -f -B build/autoconf_prepend-include
	dh_update_autotools_config
	mkdir -p $(objdir_gtk_shared)
	cd $(objdir_gtk_shared) \
	    && ../configure $(GTK_CONFIGURE_OPTIONS)
	touch $@

build-gtk-shared-stamp: configure-gtk-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk_shared)
	cd $(objdir_gtk_shared)/lib && ln -s . $(DEB_HOST_MULTIARCH)
	touch $@

build-gtk-shared-contrib-stamp: build-gtk-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk_shared)/utils/wxrc
	touch $@

configure-gtk3-shared-stamp:
	dh_testdir
	autoconf -f -B build/autoconf_prepend-include
	dh_update_autotools_config
	mkdir -p $(objdir_gtk3_shared)
	cd $(objdir_gtk3_shared) \
	    && ../configure $(GTK3_CONFIGURE_OPTIONS)
	touch $@

build-gtk3-shared-stamp: configure-gtk3-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk3_shared)
	cd $(objdir_gtk3_shared)/lib && ln -s . $(DEB_HOST_MULTIARCH)
	touch $@

build-doc-stamp:
	dh_testdir
	# 3.0.3 and 3.0.3.1 lacked execute bit on this script
	WX_SKIP_DOXYGEN_VERSION_CHECK=1	/bin/bash docs/doxygen/regen.sh html
	# Delete intermediate .dot and .md5 files.
	find $(objdir_doc) \( -name '*.dot' -o -name '*.md5' \) -delete
	touch $@

build-examples-stamp: build-gtk-shared-stamp
	dh_testdir
	mkdir -p $(objdir_examples)

	# copy all samples and the Makefile generated for libwxgtk.
	# In the past, some files in the sources were randomly executable, so
	# don't just use cp -a here in case that recurs.
	cp -dR --preserve=timestamps samples $(objdir_examples)
	rm -f $(objdir_examples)/samples/Makefile
	cp -a $(objdir_gtk_shared)/samples/Makefile $(objdir_examples)/samples

	for f in `find $(objdir_examples)/samples -name makefile.unx` ; do \
		mv $$f `dirname $$f`/Makefile ; \
	done

	# don't install files from the examples which are only useful on other
	# platforms (the "horse*" files are a special case, as the image sample
	# uses various foreign image formats as data).
	find $(objdir_examples)/samples \( \
		-name 'Makefile.in' -o \
		-name 'Info*.plist*' -o \
		-name 'makefile.*' -o \
		-name '*.bat' -o \
		-name '*.bdsproj' -o \
		-name '*.cur' -o \
		-name '*.dsp' -o \
		-name '*.dsw' -o \
		-name '*.icc' -o \
		-name '*.icns' -o \
		-name '*.ico' -o \
		-name '*.mms' -o \
		-name '*.pbxproj' -o \
		-name '*.plc' -o \
		-name '*.r' -o \
		-name '*.rc' -o \
		-name '*.rc?' -o \
		-name '*.vcproj' \
	    \) \! -name 'horse*' -delete

	# We end up with some empty directories which only had OS X build stuff
	# in, at least in 3.0.2.
	find $(objdir_examples)/samples -type d -empty -delete

	echo "generating unpack_examples.sh script"
	sed -e 's/=V/$(release)/g' < debian/unpack_examples.sh.in	\
				   > debian/unpack_examples.sh
	chmod 755 debian/unpack_examples.sh

	touch $@

build-i18n-stamp: build-gtk-shared-stamp
	dh_testdir

	# touch .po files first, since if they are not already up
	# to date then _now_ is not the time to fix it.
	# That should have been been done before the release was tagged.
	touch $(objdir_i18n)/*.po
	$(MAKE) -C $(objdir_i18n) allmo
	touch $@

configure-msw-shared-stamp:
	dh_testdir
	autoconf -f -B build/autoconf_prepend-include
	dh_update_autotools_config
	mkdir -p $(objdir_msw_shared)
	cd $(objdir_msw_shared)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				$(MSW_CONFIGURE_OPTIONS)
	touch $@

build-msw-shared-stamp: configure-msw-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_msw_shared)
	touch $@

configure-msw-static-stamp:
	dh_testdir
	autoconf -f -B build/autoconf_prepend-include
	dh_update_autotools_config
	mkdir -p $(objdir_msw_static)
	cd $(objdir_msw_static)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				$(MSW_CONFIGURE_OPTIONS)		\
				--disable-shared
	touch $@

build-msw-static-stamp: configure-msw-static-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_msw_static)
	touch $@


clean: debian/control
	dh_testdir
	dh_testroot

	rm -rf $(objdirs)

	dh_clean
	rm -f debian/$(package_wxbase_lib).* \
	      debian/$(package_wxbase_dev).* \
	      debian/$(package_gtk_lib).* \
	      debian/$(package_gtk_dev).* \
	      debian/$(package_gtk3_lib).* \
	      debian/$(package_gtk3_dev).* \
	      debian/$(package_headers).* \
	      debian/$(package_i18n).* \
	      debian/$(package_doc).* \
	      debian/$(package_examples).* \
	      debian/$(package_msw_dev).* \
	      debian/lintian-override \
	      debian/unpack_examples.sh \
	      docs/doxygen/doxygen.log


install_arch: build-arch $(install_all_arch)

install: build_all $(install_all_native)

install-wxbase-lib: DH_OPTIONS=-p$(package_wxbase_lib)
install-wxbase-lib: build-wxbase-shared-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	@# No, this is not a typo, we steal these libs from the gtk build.
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_base*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_wxbase_lib): debian/lintian-override > debian/$(package_wxbase_lib)/usr/share/lintian/overrides/$(package_wxbase_lib)

install-wxbase-dev: DH_OPTIONS=-p$(package_wxbase_dev)
install-wxbase-dev: build-wxbase-shared-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	@# No, this is not a typo, we steal these libs from the gtk build.
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_base*.so	usr/lib/$(DEB_HOST_MULTIARCH)
	# Strip the kernel version of build machine from WXWIN_OS_DESCRIPTION
	# as it isn't useful information and makes the build less reproducible.
	sed -i 's/^\(#define WXWIN_OS_DESCRIPTION "[^ ]*\).*/\1"/' $(objdir_wxbase_shared)/lib/wx/include/*/wx/setup.h
	dh_install $(objdir_wxbase_shared)/lib/wx/include	usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_wxbase_shared)/lib/wx/config/base*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config

install-gtk-shared-stamp: build-gtk-shared-stamp build-gtk-shared-contrib-stamp
	dh_testdir
	mkdir -p $(objdir_gtk_install)
	$(MAKE) -C $(objdir_gtk_shared) install prefix=`pwd`/$(objdir_gtk_install)
	# Strip the kernel version of build machine from WXWIN_OS_DESCRIPTION
	# as it isn't useful information and makes the build less reproducible.
	sed -i 's/^\(#define WXWIN_OS_DESCRIPTION "[^ ]*\).*/\1"/' $(objdir_gtk_install)/lib/*/wx/include/*/wx/setup.h
	touch $@

install-gtk-lib: DH_OPTIONS=-p$(package_gtk_lib)
install-gtk-lib: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install -Xmedia $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtk_lib): debian/lintian-override > debian/$(package_gtk_lib)/usr/share/lintian/overrides/$(package_gtk_lib)

install-gtk-dev: DH_OPTIONS=-p$(package_gtk_dev)
install-gtk-dev: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install -Xmedia $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*.so	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install -Xmediactrl $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/wx/include	usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/wx/config/gtk*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config

install-gtkmedia-lib: DH_OPTIONS=-p$(package_gtkmedia_lib)
install-gtkmedia-lib: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*media*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtkmedia_lib): debian/lintian-override > debian/$(package_gtkmedia_lib)/usr/share/lintian/overrides/$(package_gtkmedia_lib)

install-gtkmedia-dev: DH_OPTIONS=-p$(package_gtkmedia_dev)
install-gtkmedia-dev: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*media*.so	usr/lib/$(DEB_HOST_MULTIARCH)

install-gtk3-shared-stamp: build-gtk3-shared-stamp
	dh_testdir
	mkdir -p $(objdir_gtk3_install)
	$(MAKE) -C $(objdir_gtk3_shared) install prefix=`pwd`/$(objdir_gtk3_install)
	# Strip the kernel version of build machine from WXWIN_OS_DESCRIPTION
	# as it isn't useful information and makes the build less reproducible.
	sed -i 's/^\(#define WXWIN_OS_DESCRIPTION "[^ ]*\).*/\1"/' $(objdir_gtk3_install)/lib/*/wx/include/*/wx/setup.h
	touch $@

install-gtk3-lib: DH_OPTIONS=-p$(package_gtk3_lib)
install-gtk3-lib: install-gtk3-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install -Xmedia -Xwebview $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtk3_lib): debian/lintian-override > debian/$(package_gtk3_lib)/usr/share/lintian/overrides/$(package_gtk3_lib)

install-gtk3-dev: DH_OPTIONS=-p$(package_gtk3_dev)
install-gtk3-dev: install-gtk3-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install -Xmedia -Xwebview $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*.so	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install -Xmediactrl $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/wx/include	usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/wx/config/gtk*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config

install-gtk3media-lib: DH_OPTIONS=-p$(package_gtk3media_lib)
install-gtk3media-lib: install-gtk3-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*media*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtk3media_lib): debian/lintian-override > debian/$(package_gtk3media_lib)/usr/share/lintian/overrides/$(package_gtk3media_lib)

install-gtk3media-dev: DH_OPTIONS=-p$(package_gtk3media_dev)
install-gtk3media-dev: install-gtk3-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*media*.so	usr/lib/$(DEB_HOST_MULTIARCH)

install-gtk3webview-lib: DH_OPTIONS=-p$(package_gtk3webview_lib)
install-gtk3webview-lib: install-gtk3-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*webview*.so.*        usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/wx/$(release)/web-extensions/*        usr/lib/$(DEB_HOST_MULTIARCH)/wx/$(release)/web-extensions
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtk3webview_lib): debian/lintian-override > debian/$(package_gtk3webview_lib)/usr/share/lintian/overrides/$(package_gtk3webview_lib)

install-gtk3webview-dev: DH_OPTIONS=-p$(package_gtk3webview_dev)
install-gtk3webview-dev: install-gtk3-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk3_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*webview*.so  usr/lib/$(DEB_HOST_MULTIARCH)

install-common: DH_OPTIONS=-p$(package_common)
install-common: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep

	dh_install $(objdir_gtk_install)/share/bakefile/presets usr/share/bakefile
	dh_install $(objdir_gtk_install)/share/bakefile/presets/wx*.bkl usr/share/bakefile/presets

	dh_install $(objdir_gtk_install)/share/aclocal usr/share
	dh_installman debian/wx-config.1

	dh_install $(objdir_gtk_shared)/utils/wxrc/wxrc usr/bin
	dh_installman debian/wxrc-tools.1
	dh_link usr/share/man/man1/wxrc-tools.1 usr/share/man/man1/wxrc.1


install-headers: DH_OPTIONS=-p$(package_headers)
install-headers: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep

	dh_install $(objdir_gtk_install)/include	usr

install-i18n: DH_OPTIONS=-p$(package_i18n)
install-i18n: build-i18n-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	# We end up with usr/share/locale/zh/LC_MESSAGES/ empty in 2.8.12.1.
	find $(objdir_gtk_install)/share/locale -type d -empty -delete
	dh_install $(objdir_gtk_install)/share/locale	usr/share

install-doc: DH_OPTIONS=-p$(package_doc)
install-doc: build-doc-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_doc)/html usr/share/doc/$(package_doc)/

install-examples: DH_OPTIONS=-p$(package_examples)
install-examples: build-examples-stamp
	dh_testdir
	dh_testroot
	dh_prep

install-msw-dev: DH_OPTIONS=-p$(package_msw_dev)
install-msw-dev: build-msw-shared-stamp build-msw-static-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_msw_shared)/lib/*.dll*		     usr/$(cross_host)/lib
	dh_install $(objdir_msw_shared)/lib/wx/include		     usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_shared)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	dh_install $(objdir_msw_static)/lib/*.a			     usr/$(cross_host)/lib
	dh_install $(objdir_msw_static)/lib/wx/include		     usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_static)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	$(cross_host)-strip --strip-debug debian/$(package_msw_dev)/usr/$(cross_host)/lib/*.a

	@# As a special case for the cross packages, we link their config
	@# under /usr as well as under the normal cross prefix.  This way
	@# --prefix=/usr/$(cross_host) and --prefix=/usr --host=$(cross_host)
	@# will have a congruent effect on wx-config.
	@( for f in `ls -1 debian/$(package_msw_dev)/usr/$(cross_host)/lib/wx/config`; do \
	      all_cfg="$${all_cfg} usr/$(cross_host)/lib/wx/config/$$f usr/lib/wx/config/$$f"; \
	      echo "linking cross config /usr/$(cross_host)/lib/wx/config/$$f"; \
	   done;                                                                \
	   dh_link $${all_cfg};                                                 \
	 )

install-headers-msw: DH_OPTIONS=-p$(package_headers_msw)
install-headers-msw:
	dh_testdir
	dh_testroot
	dh_prep

	$(MAKE) -C $(objdir_msw_shared) install prefix=`pwd`/$(objdir_msw_install)

#	Symlink all the headers that will be installed by the main -headers
#	package to where the cross compiler will expect them.
	@( for f in `ls -1 $(objdir_msw_install)/include/wx-$(release)/wx`; do  \
	      all_h="$${all_h} usr/include/wx-$(release)/wx/$$f usr/$(cross_host)/include/wx-$(release)/wx/$$f"; \
	      echo "linking header /usr/include/wx-$(release)/wx/$$f"; \
	   done;                                                       \
	   dh_link $${all_h};                                          \
	 )

#	But install this lot for real.
	rm -f debian/$(package_headers_msw)/usr/$(cross_host)/include/wx-$(release)/wx/msw
	dh_install $(objdir_msw_install)/include/wx-$(release)/wx/msw  usr/$(cross_host)/include/wx-$(release)/wx

binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs docs/changes.txt
	dh_installdocs
	dh_installexamples
	dh_installmenu
	dh_link
	dh_strip
	dh_compress
	dh_fixperms

	dh_makeshlibs -V

	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture-independent files here.
# Note that you currently can't build the indep packages without first
# building the arch specific package files needed to create them.
binary-indep: build_all install
	$(MAKE) -f debian/rules \
		DH_OPTIONS="-i $(addprefix -N,$(do_not_build_packages))" \
		binary-common

# Build just the architecture-dependent files here.
binary-arch: build-arch install_arch
	$(MAKE) -f debian/rules \
		DH_OPTIONS="-a $(addprefix -N,$(do_not_build_packages))" \
		binary-common

# Build all packages target.
binary: binary-arch binary-indep


# This is a special target for building the wxMSW-cross packages.
# It's not currently called during the official package build run
# but may be run separately to build the extra packages.
# There is an implied build dep on the mingw32 cross compiler
# that is not in the control file.
binary-cross: control-files-stamp $(install_all_cross)
	cat debian/control.in debian/control.msw.in |\
	    sed -e 's/=V/$(release)/g;s/=SOV/$(sorelease)/g;s/=SOG3V/$(soreleasegtk3)/g'\
		> debian/control

	$(MAKE) -f debian/rules \
		DH_OPTIONS="-p$(package_msw_dev) -p$(package_headers_msw)" \
		binary-common


.PHONY: build build_all build-arch build-indep				\
	clean \
	binary-indep binary-arch binary binary-common			\
	binary-wxbase binary-wxbase-dev		\
	binary-cross						\
	install install_arch install-gtk-lib install-gtk-dev		\
	install-gtkmedia-lib install-gtkmedia-dev	\
	install-gtk3-lib install-gtk3-dev		\
	install-gtk3media-lib install-gtk3media-dev	\
	install-gtk3webview-lib install-gtk3webview-dev	\
	install-common install-headers install-i18n         \
	install-examples install-msw-dev install-headers-msw
